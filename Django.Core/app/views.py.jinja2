from django.contrib.auth.decorators import login_required
from django.shortcuts import render, get_object_or_404, redirect
from django.core.urlresolvers import reverse
from django.contrib.auth.forms import PasswordChangeForm, UserChangeForm
from django.contrib.auth import update_session_auth_hash
from django.contrib import messages
from django.forms import ModelForm
from django.http import HttpResponseRedirect
from .forms import DateInput, TimeInput
from .model_extensions import {% for m_model in m_models.modelItems -%}{{ m_model.modelName}}_extensions{{ "," if not loop.last }} {% endfor -%}
{##}
# Create your views here.

# BEGIN_OF_CODE_GENERATION

from .models import {% for m_model in m_models.modelItems -%} {{ m_model.modelName}}{{ "," if not loop.last }} {% endfor -%}
{##}
{##}
{% for m_model in m_models.modelItems -%}
{##}
{##}
class {{ m_model.modelName }}Form(ModelForm):

    class Meta:
        model = {{ m_model.modelName }}
        fields = [{% for m_baseProp in m_model.modelProperties.baseProperties -%}'{{ m_baseProp.propertyName }}',{% endfor -%}{% for m_customProp in m_model.modelProperties.customProperties -%}'{{ m_customProp.propertyName }}'{{ "," if not loop.last }}{% endfor -%}]
        {% if m_model.inherits != 'models.Model' and m_model.inherits != 'User' -%}
            {% for m_model_inherited in m_models.modelItems -%}
                {% if m_model_inherited.modelName == m_model.inherits -%}
        inherited = [{% for m_baseProp in m_model_inherited.modelProperties.baseProperties -%}'{{ m_baseProp.propertyName }}',{% endfor -%}{% for m_customProp in m_model_inherited.modelProperties.customProperties -%}'{{ m_customProp.propertyName }}'{{ "," if not loop.last }}{% endfor -%}]
        fields = inherited + fields
                    {% break -%}
                {% endif -%}
            {% endfor -%}
        {% endif -%}
        {% if m_model.inherits == 'User' -%}
        inherited = ['username','first_name','last_name','email', 'password']
        fields = inherited + fields
        {% endif -%}
        {##}
        # add custom properties, validators widgets
{##}
{##}
@login_required
def {{ m_model.modelName }}_list(request):
    {{ m_model.modelName }}_all = {{ m_model.modelName }}.objects.all()
    data = {% raw %}{'item_list': {% endraw %}{{ m_model.modelName }}{% raw %}_all}{% endraw %}
    template_name = 'app/{{ m_model.modelName }}.html'
    return render(request, template_name, data)

{##}
{##}
@login_required
def {{ m_model.modelName }}_detail(request, pk):
    {{ m_model.modelName }}_data = get_object_or_404({{ m_model.modelName }}, pk=pk)
    customData = {{ m_model.modelName }}_extensions.{{ m_model.modelName }}CustomFunctions.get_custom_data_for_{{ m_model.modelName }}_list({{ m_model.modelName }}_data)
    template_name = 'app/{{ m_model.modelName }}_details.html'
    data = {"item": {{ m_model.modelName }}_data, 'custom_data': customData}
    return render(request, template_name, data)

{##}
{##}
@login_required
def {{ m_model.modelName }}_create(request):
    template_name = 'app/{{ m_model.modelName }}_add_form.html'
    form = {{ m_model.modelName }}Form(request.POST or None)
    if form.is_valid():
        item = form.save(commit=False)
        {% if m_model.inherits == 'User' -%}
        item.set_password(item.password)
        {% endif %}
        item.save()
        return HttpResponseRedirect(reverse('{{ m_model.modelName }}_detail', kwargs={'pk': item.id}))
    return render(request, template_name, {'form': form})
{##}
{##}
@login_required
def {{ m_model.modelName }}_delete(request, pk):
    template_name = 'app/{{ m_model.modelName }}_confirm_delete_form.html'
    item = get_object_or_404({{ m_model.modelName }}, pk=pk)
    if request.method == 'POST':
        item.delete()
        return redirect('{{ m_model.modelName }}')
    return render(request, template_name, {'item': item})
{##}
{##}
@login_required
def {{ m_model.modelName }}_update(request, pk):
    template_name = 'app/{{ m_model.modelName }}_update_form.html'
    item = get_object_or_404({{ m_model.modelName }}, pk=pk)
    form = {{ m_model.modelName }}Form(request.POST or None, instance=item)
    if form.is_valid():
        {% if m_model.inherits == 'User' -%}
        item.set_password(item.password)
        {% endif %}
        form.save()
        return redirect('{{ m_model.modelName }}_detail', pk=item.id)
    return render(request, template_name, {'form': form})
{% endfor -%}
# END_OF_CODE_GENERATION


@login_required()
def home_page(request):
    template_name = 'app/home_page.html'
    return render(request, template_name, {'user': request.user})


@login_required()
def user_profile(request):
    template_name = 'app/user_profile.html'
    return render(request, template_name, {'user': request.user})


@login_required
def user_update(request):
    template_name = 'app/user_profile_update.html'
    user = get_object_or_404(User, pk=request.user.id)
    form = UserChangeForm(request.POST or None, instance=user)
    if form.is_valid():
        form.save()
        return redirect('user-profile')
    return render(request, template_name, {'form': form})


def change_password(request):
    if request.method == 'POST':
        form = PasswordChangeForm(request.user, request.POST)
        if form.is_valid():
            user = form.save()
            update_session_auth_hash(request, user)  # Important!
            messages.success(request, 'Your password was successfully updated!')
            return redirect('user-profile')
        else:
            messages.error(request, 'Please correct the error below.')
    else:
        form = PasswordChangeForm(request.user)
    return render(request, 'app/change_password.html', {'form': form})
